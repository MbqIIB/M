BROKER SCHEMA esqls.searchclaims

CREATE COMPUTE MODULE SearchClaims_esql_validate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		DECLARE Change, rut, poliza , Val1, Val2, TOKEN , RUT CHARACTER;
		DECLARE Max, cardirut INTEGER;

		SET Change = InputLocalEnvironment.HTTP.Input.RequestLine.RequestURI;
		SET Max = LENGTH(Change);
		SET Val1 = SUBSTRING(Change FROM 8 FOR Max);
		SET rut = SUBSTRING(Val1 BEFORE '/');
		SET cardirut = LENGTH(Val1);
		SET Val2 = SUBSTRING(Val1 AFTER '/');
		--SET Val2 = SUBSTRING(Change FROM cardirut + 2 FOR Max);
		SET poliza = SUBSTRING(Val2 BEFORE '/');
		SET Environment.EntradaVariable.rut = rut;
		SET Environment.EntradaVariable.poliza = poliza;
		SET TOKEN = CAST(InputRoot.HTTPInputHeader.Token AS CHARACTER);

		IF TOKEN <> '' AND rut <> '' THEN

			CREATE FIELD OutputRoot.XMLNSC.ns:ValidateToken TYPE Name;
			DECLARE rOut REFERENCE TO OutputRoot.XMLNSC.ns:ValidateToken;

			SET rOut.ns:token = CAST(InputRoot.HTTPInputHeader.Token AS CHARACTER);
			SET rOut.ns:RUT = CAST(rut AS CHARACTER) ;

			SET Environment.HTTPinputheader[] = InputRoot.HTTPInputHeader[];
			SET Environment.HTTP[] = InputLocalEnvironment.HTTP[];

		ELSE
			SET OutputRoot.JSON.Data.error.code = 401;
			SET OutputRoot.JSON.Data.error.message = 'UnauthorizedAccess';

			CREATE FIELD OutputRoot.JSON.Data.error.errors IDENTITY(JSON.Array)errors;
			SET OutputRoot.JSON.Data.error.errors.Item[1].reason = 'TokenMissMatch';
			SET OutputRoot.JSON.Data.error.errors.Item[1].fieldList = '';
			SET OutputRoot.JSON.Data.error.errors.Item[1].fieldList TYPE = JSON.Array;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;

		END IF;		


		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;