BROKER SCHEMA esqls.searchclaims
PATH esqls.generics;

CREATE COMPUTE MODULE SearchClaims_esql_ComponenteSalida
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE I, J, K, L, countPartyClaim INTEGER;
		DECLARE idRoleType, FECHA, FECHA2 ,FECHA3, DIA, ANIO, MES, refe,limite CHARACTER;
		DECLARE refClaims REFERENCE TO Environment.Claims;

		DECLARE Count INTEGER CARDINALITY(refClaims.Claim[]);

		SET OutputRoot.JSON.Data.metadata.totalCount = Count;

		IF Environment.*:limit <> '' THEN
			IF Environment.*:limit = 10000 THEN
				SET OutputRoot.JSON.Data.metadata.limit = Count;
			ELSE
				SET OutputRoot.JSON.Data.metadata.limit = CAST(Environment.*:limit AS INTEGER);
			END IF;

		ELSE
			SET OutputRoot.JSON.Data.metadata.limit = Count;
		END IF;

		IF Environment.*:Val = 0 THEN
			SET OutputRoot.JSON.Data.metadata.offset = 0;
		ELSE
			SET OutputRoot.JSON.Data.metadata.offset = CAST(Environment.*:offset AS INTEGER);
		END IF;

		SET I = 1;
		SET J = Count;

		CREATE FIELD OutputRoot.JSON.Data.claims IDENTITY(JSON.Array)claims;

		WHILE(I <= J ) DO
		--- SearchClaims
		SET OutputRoot.JSON.Data.claims.Item[I].claimId = CAST(refClaims.Claim[I].*:ClaimInfo.*:Number AS CHARACTER);
		
		SET countPartyClaim = CARDINALITY(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[]);
		
		IF countPartyClaim > 0 THEN
			
			SET idRoleType = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[1].*:Roles.*:PartyRole[1].*:Role.*:Id AS CHARACTER);
			
			IF idRoleType = '1' THEN
				SET OutputRoot.JSON.Data.claims.Item[I].principalBeneficiaryName = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[1].*:Party.*:FullName AS CHARACTER);
			END IF;
			
			IF refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[1].*:Roles.*:PartyRole[2].*:Role.*:Id <> '' THEN
				SET idRoleType = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[1].*:Roles.*:PartyRole[2].*:Role.*:Id AS CHARACTER);
		
				IF idRoleType = '18' THEN
					SET OutputRoot.JSON.Data.claims.Item[I].beneficiaryName = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[1].*:Party.*:FullName AS CHARACTER);
				END IF;
			END IF;
		END IF;
		
		IF countPartyClaim > 1 THEN
			
			SET idRoleType = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[2].*:Roles.*:PartyRole[1].*:Role.*:Id AS CHARACTER);
			
			IF idRoleType = '1' THEN
				SET OutputRoot.JSON.Data.claims.Item[I].principalBeneficiaryName = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[2].*:Party.*:FullName AS CHARACTER);
			END IF;
			
			IF refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[2].*:Roles.*:PartyRole[2].*:Role.*:Id <> '' THEN
				SET idRoleType = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[2].*:Roles.*:PartyRole[2].*:Role.*:Id AS CHARACTER);
		
				IF idRoleType = '18' THEN
					SET OutputRoot.JSON.Data.claims.Item[I].beneficiaryName = CAST(refClaims.Claim[I].ClaimInfo.*:Parties.*:ClaimParty[2].*:Party.*:FullName AS CHARACTER);
				END IF;
			END IF;
		END IF;
		
		
		

		SET FECHA = SUBSTRING(CAST(refClaims.Claim[I].ClaimInfo.*:ReportDate AS CHARACTER) FROM 1 FOR 10);
		--SET FECHA = SUBSTRING(CAST(Environment.*:Resultado.*:SearchClaims[I].*:Claims.*:ReportDate AS CHARACTER) FROM 12 FOR 10);
		SET ANIO = SUBSTRING(FECHA FROM 1 FOR 4);
		SET MES = SUBSTRING(FECHA FROM 6 FOR 2);
		SET DIA = SUBSTRING(FECHA FROM 9 FOR 2);

		SET OutputRoot.JSON.Data.claims.Item[I].submittedDate = DIA||'/'||MES||'/'||ANIO;
		SET OutputRoot.JSON.Data.claims.Item[I].receivedDate = DIA||'/'||MES||'/'||ANIO;
		--SET FECHA2 = SUBSTRING(CAST(Environment.*:Resultado.*:SearchClaims[I].*:Claims.*:StatusModificationDate AS CHARACTER) FROM 12 FOR 10);
		SET FECHA2 = SUBSTRING(CAST(refClaims.Claim[I].ClaimInfo.*:StatusModificationDate AS CHARACTER) FROM 1 FOR 10);
		SET ANIO = SUBSTRING(FECHA2 FROM 1 FOR 4);
		SET MES = SUBSTRING(FECHA2 FROM 6 FOR 2);
		SET DIA = SUBSTRING(FECHA2 FROM 9 FOR 2);

		SET OutputRoot.JSON.Data.claims.Item[I].deniedDate = DIA||'/'||MES||'/'||ANIO;

		SET OutputRoot.JSON.Data.claims.Item[I].status = resolveMapStatus(CAST(refClaims.Claim[I].ClaimInfo.*:Status.*:Id AS CHARACTER), CAST(refClaims.Claim[I].ClaimInfo.*:Status.*:Name AS CHARACTER));
		--- Claims Settlement
		SET OutputRoot.JSON.Data.claims.Item[I].totalAmount = '$'||CAST(refClaims.Claim[I].GetClaimSettlementResult.*:TotalClaimedAmount.*:Value AS CHARACTER);
		---

		SET OutputRoot.JSON.Data.claims.Item[I].submissionChannel = CAST(refClaims.Claim[I].ClaimInfo.*:ReportChannel AS CHARACTER);
		SET OutputRoot.JSON.Data.claims.Item[I].reason = CAST(refClaims.Claim[I].ClaimInfo.*:Description AS CHARACTER);
		SET OutputRoot.JSON.Data.claims.Item[I].reasonDate = DIA||'/'||MES||'/'||ANIO;
		--- Claims Settlement
		SET OutputRoot.JSON.Data.claims.Item[I].deductible = CAST(refClaims.Claim[I].GetClaimSettlementResult.*:TotalDeductibleAmount.*:Value AS CHARACTER);
		SET OutputRoot.JSON.Data.claims.Item[I].paymentType = CAST(refClaims.Claim[I].GetClaimSettlementResult.*:Settlement.*:ReimbursableDetail.*:ReimbursableClaimSettlementDetail.*:IMed AS CHARACTER);

		SET FECHA3 = SUBSTRING(CAST(refClaims.Claim[I].GetClaimSettlementResult.*:Settlement.*:PaidDate AS CHARACTER) FROM 1 FOR 10);

		SET ANIO = SUBSTRING(FECHA3 FROM 1 FOR 4);
		SET MES = SUBSTRING(FECHA3 FROM 6 FOR 2);
		SET DIA = SUBSTRING(FECHA3 FROM 9 FOR 2);

		SET OutputRoot.JSON.Data.claims.Item[I].paidDate = DIA||'/'||MES||'/'||ANIO;

		SET OutputRoot.JSON.Data.claims.Item[I].payableAmount = '$'||CAST(refClaims.Claim[I].GetClaimSettlementResult.*:TotalPaidAmount.*:Value AS CHARACTER);
		-- GEtdocument Ansus
		SET OutputRoot.JSON.Data.claims.Item[I].pdf = CAST(refClaims.Claim[I].PDF AS CHARACTER);
		---getclaims document
		SET L = CARDINALITY(refClaims.Claim[I].GetClaimDocumentsResponse.*:ClaimDocument[]);
		SET K = 1;

		WHILE (K <= L) DO

			SET OutputRoot.JSON.Data.claims.Item[I].documents.Item[K].type= CAST(refClaims.Claim[I].GetClaimDocumentsResponse.*:ClaimDocument[K].*:Type AS CHARACTER);
			SET OutputRoot.JSON.Data.claims.Item[I].documents.Item[K].size= CAST(refClaims.Claim[I].GetClaimDocumentsResponse.*:ClaimDocument[K].*:Size AS INTEGER);
			SET OutputRoot.JSON.Data.claims.Item[I].documents.Item[K].unit= 'KB';
			SET OutputRoot.JSON.Data.claims.Item[I].documents.Item[K].name= CAST(refClaims.Claim[I].GetClaimDocumentsResponse.*:ClaimDocument[K].*:Name AS CHARACTER);
			SET OutputRoot.JSON.Data.claims.Item[I].documents.Item[K].documentId= CAST(refClaims.Claim[I].GetClaimDocumentsResponse.*:ClaimDocument[K].*:Id AS CHARACTER);
			SET K = K + 1;

		END WHILE;

		SET OutputRoot.JSON.Data.claims.Item[I].documents TYPE = JSON.Array;


		SET I = I + 1;

	END WHILE;

	DECLARE orderBy CHARACTER Environment.parameters.orderBy;
	DECLARE order CHARACTER Environment.parameters.order;
	DECLARE refClaimsResponse REFERENCE TO OutputRoot.JSON.Data.claims;
	
	--Ordena la salida de acuerdo a los parametros de ordenamiento dentro del arreglo Environment.parameters.orderBy
	DECLARE refOrderByList REFERENCE TO Environment.parameters.orderBy;
	CALL sortBy(refClaimsResponse, order, refOrderByList);
	
	SET I = 1;
	DECLARE countClaims INTEGER CARDINALITY(refClaimsResponse.Item[]);
	WHILE(I <= countClaims) DO
		SET OutputRoot.JSON.Data.claims.Item[I].documents TYPE = JSON.Array;
		SET I = I + 1;
	END WHILE;
	
	RETURN TRUE;
END;


/*
 * Find the status value from idStatus received from the SearchClaims.
 *
 * Parameters:
 *
 * IN: CHARACTER idStatus - Current id status to compare.
 * IN: CHARACTER defaultStatus - If the current id statu does'nt exist, then this value is returned.
 */
CREATE FUNCTION resolveMapStatus(IN idStatus CHARACTER, IN defaultStatus CHARACTER) RETURNS CHARACTER
	BEGIN
		CASE
		WHEN (idStatus = STATUS_ID_NOTIFICADO OR idStatus = STATUS_ID_PENDIENTECONTRALORIAMEDICA OR idStatus = STATUS_ID_DIGITADO OR idStatus = STATUS_ID_LIQUIDARDESPUES OR idStatus = STATUS_ID_RECEPCIONADO OR idStatus = STATUS_ID_VALIDADO OR idStatus = STATUS_ID_VALIDADESPUES) THEN
			RETURN STATUS_ENPROCESO;
		WHEN idStatus = STATUS_ID_LIQUIDADA THEN
			RETURN STATUS_PAGADO;
		WHEN (idStatus = STATUS_ID_ANULADO OR idStatus = STATUS_ID_NEGADO OR idStatus = STATUS_ID_RECHAZADO) THEN
			RETURN STATUS_RECHAZADO;
		ELSE
			RETURN defaultStatus;
		END CASE;
	END;

END MODULE;