BROKER SCHEMA esqls.generics
PATH esqls.providersearch;
/*
 * Ordena la lista que se encuentra en la referencia de acuerdo a un modo (asc, desc).
 *
 * Parameters:
 *
 * INOUT: REFERENCE refsToOrder - referencia del arbol OutputRoot.JSON.Data.providers que contiene los 'providers' a ordenar.
 * IN: CHARACTER sortMode - modo de ordenamiento, puede ser 'asc', para un ordenamiento ascendente, o 'desc' en caso contrario.
 * IN: CHARACTER valueToOrder - nombre del campo para realizar la comparacion.
 */
CREATE PROCEDURE sortBy(INOUT refsToOrder REFERENCE, IN sortMode CHARACTER, IN valueToOrder REFERENCE)
	BEGIN
		DECLARE i, j, idxOrderBy, idxPathCount, pathCount INTEGER 1;
		DECLARE itemCount INTEGER CARDINALITY(refsToOrder.Item[]);
		DECLARE valueToOrdenCount INTEGER CARDINALITY(valueToOrder.Item[]);
		DECLARE currentValue, nextValue, tempCurrentValue, tempNextValue, valueToOrderText, path CHARACTER '';
		DECLARE refCurrentValue, refNextValue, tempItem, ref ROW;
		
		WHILE(i <= itemCount) DO

			SET j = 1;
			WHILE(j < itemCount) DO
				
				SET idxOrderBy = 1;
				SET currentValue = '';
				SET nextValue = '';
				
				WHILE(idxOrderBy <= valueToOrdenCount)DO
				
					SET valueToOrderText = valueToOrder.Item[idxOrderBy];
					
					IF CONTAINS(valueToOrderText, '.') THEN
						
						SET refCurrentValue = refsToOrder.Item[j];
						SET refNextValue = refsToOrder.Item[j + 1];
						
						SET idxPathCount = 1; 
						CALL Split(valueToOrderText, ref, '.');
						SET pathCount = CARDINALITY(ref.Split.Array[]);
						SET path = '';
						
						WHILE(idxPathCount <= pathCount) DO
							SET path = CAST(ref.Split.Array[idxPathCount] AS CHARACTER);
							
							IF FIELDTYPE(refCurrentValue.{path}) = Name THEN
								SET refCurrentValue = refCurrentValue.{path};
							ELSE
								IF FIELDTYPE(refCurrentValue.{path}) = NameValue THEN
									SET tempCurrentValue = refCurrentValue.{path};
								END IF;
							END IF;
							
							IF FIELDTYPE(refNextValue.{path}) = Name THEN
								SET refNextValue = refNextValue.{path};
							ELSE
								IF FIELDTYPE(refNextValue.{path}) = NameValue THEN
									SET tempNextValue = refNextValue.{path};
								END IF;
							END IF;
							
							SET idxPathCount = idxPathCount + 1;
						END WHILE;
						
						SET currentValue = currentValue || tempCurrentValue;
						SET nextValue = nextValue || tempNextValue;
					ELSE
						SET currentValue = currentValue || refsToOrder.Item[j].{valueToOrder.Item[idxOrderBy]};
						SET nextValue = nextValue || refsToOrder.Item[j + 1].{valueToOrder.Item[idxOrderBy]};
					END IF;
					
					SET idxOrderBy = idxOrderBy + 1;
				END WHILE;
				
				IF sortMode = 'desc' THEN
					IF currentValue < nextValue THEN
						SET tempItem = refsToOrder.Item[j];
						SET refsToOrder.Item[j] = refsToOrder.Item[j + 1];
						SET refsToOrder.Item[j + 1] = tempItem;
					END IF;
				ELSE
					IF currentValue > nextValue THEN
						SET tempItem = refsToOrder.Item[j];
						SET refsToOrder.Item[j] = refsToOrder.Item[j + 1];
						SET refsToOrder.Item[j + 1] = tempItem;
					END IF;
				END IF;

				SET j = j + 1;
			END WHILE;

			SET i = i + 1;
		END WHILE;
	END;
	
	
	CREATE PROCEDURE Split (IN S CHARACTER, IN Env REFERENCE, IN Delim CHARACTER)
	BEGIN
		DECLARE P INTEGER;
		DECLARE Idx INTEGER 1;
	
		SET Env.Split = NULL;
	
		REPEAT
			SET P = POSITION(Delim IN S);
			IF P = 0 THEN
				IF LENGTH(S) > 0 THEN
					SET Env.Split.Array[Idx] = S;
				END IF;
			ELSE
				SET Env.Split.Array[Idx] = LEFT(S, P - 1);
				SET S = SUBSTRING(S FROM P + LENGTH(Delim));
				SET Idx = Idx + 1;
			END IF;
			UNTIL P = 0
	
		END REPEAT;
	
	END;