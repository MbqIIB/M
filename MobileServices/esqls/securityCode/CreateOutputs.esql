BROKER SCHEMA esqls.securityCode
PATH esqls.generics;

/*******************************
 * CreateOutputErrorUnexpected *
 *******************************/
CREATE COMPUTE MODULE CreateOutputErrorUnexpected

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Copy properties and environment so it doesn't get lost
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.Properties = InputRoot.Properties;

		--Set the error values in local environment acording to the business rules
		SET OutputLocalEnvironment.Error.ErrorCode = 402;
		SET OutputLocalEnvironment.Error.ErrorMessage = 'UnexpectedIssue';
		SET OutputLocalEnvironment.Error.ErrorReason = 'ParsingError';
		SET OutputLocalEnvironment.Error.ErrorFieldList = '';

		CALL LogFullException(InputExceptionList, InputRoot, CAST(InputLocalEnvironment.OtherError AS CHARACTER));

		RETURN TRUE;
	END;
END MODULE;

/***************************
 * CreateOutputErrorNoData *
 ***************************/
CREATE COMPUTE MODULE CreateOutputErrorNoData

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Copy properties and environment so it doesn't get lost
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.Properties = InputRoot.Properties;

		--Set the error values in local environment acording to the business rules
		SET OutputLocalEnvironment.Error.ErrorCode = 202;
		SET OutputLocalEnvironment.Error.ErrorMessage = 'NoDataFound';
		SET OutputLocalEnvironment.Error.ErrorReason = 'NoDataFound';
		SET OutputLocalEnvironment.Error.ErrorFieldList = '';
 
		CALL LogFullException(InputExceptionList, InputRoot,'');

		RETURN TRUE;
	END;
END MODULE;

/**********************************
 * Create Output Error Validation *
 **********************************/
CREATE COMPUTE MODULE CreateOutputErrorValidation

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Copy properties and environment so it doesn't get lost
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.Properties = InputRoot.Properties;

		--Set the error values in local environment acording to the business rules
		SET OutputLocalEnvironment.Error.ErrorCode = 406;
		SET OutputLocalEnvironment.Error.ErrorMessage = 'Validation Failed';
		SET OutputLocalEnvironment.Error.ErrorReason = 'MissingRequestObject';
		SET OutputLocalEnvironment.Error.ErrorFieldList = InputLocalEnvironment.MissingFields;		
 
		CALL LogFullException(InputExceptionList, InputRoot,'');

		RETURN TRUE;
	END;
END MODULE;

/*****************************
 * CreateOutputErrorMaxCount *
 *****************************/
CREATE COMPUTE MODULE CreateOutputErrorMaxCount

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Copy properties and environment so it doesn't get lost
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.Properties = InputRoot.Properties;

		--Set the error values in local environment acording to the business rules
		SET OutputLocalEnvironment.Error.ErrorCode = 410;
		SET OutputLocalEnvironment.Error.ErrorMessage = 'MaxCount';
		SET OutputLocalEnvironment.Error.ErrorReason = 'Security Code request reach to maximum count';
		SET OutputLocalEnvironment.Error.ErrorFieldList = '';		
 
		CALL LogFullException(InputExceptionList, InputRoot,'');

		RETURN TRUE;
	END;
END MODULE;

/******************
 * CreateOutputOk *
 ******************/
CREATE COMPUTE MODULE CreateOutputOk

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Copy properties and environment so it doesn't get lost
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.Properties = InputRoot.Properties;

		--Set the responses basic parameters
		SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" = 'HTTP/1.1 200 OK'; 
		SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 200; 
		SET OutputRoot.HTTPResponseHeader."Content-Type" = 'application/json; charset=utf-8'; 

		--Create the JSON response body
		SET OutputRoot.JSON.Data.code = 200;
		SET OutputRoot.JSON.Data.message = 'Success';

		RETURN TRUE;
	END;
END MODULE;